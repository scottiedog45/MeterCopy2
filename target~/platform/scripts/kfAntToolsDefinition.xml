<?xml version="1.0" encoding="UTF-8"?>
<!--
  	ANT
 
  	Copyright 2015-2016 IS2T. All rights reserved.
	Modification and distribution is permitted under certain conditions.
  	IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->
<project name="kfAnttoolsDefinition">

	<dirname file="${ant.file.kfAnttoolsDefinition}" property="kfAnttoolsDefinitions.basedir"/>
	
	<path id="kfAntTools.classpath.ref">
		<fileset dir="${kfAnttoolsDefinitions.basedir}/../tools" includes="kfAntTools*.jar"/>
		<fileset dir="${microjvm.dir}/../tools" includes="kfAntTools*.jar"/>
		<fileset dir="${kfAnttoolsDefinitions.basedir}/../tools" includes="soarModelReader.jar"/>
	</path>
	<taskdef resource="com/is2t/ant/kf/tools/antlib.xml" classpathref="kfAntTools.classpath.ref" />
	
	
	<target name="kfAntTools/dyninit" extensionOf="dyninit/context">
		<!-- Extract feature packages (brita platforms backward compatibility) -->
		<FeaturePackageExtractor classpath="${application.classpath}" outputProperty="feature.packages.path"/>
		
		<!-- Compute API / Not API classpath -->
		<condition property="APIClasspathExtractor.verbose" value="true" else="false">
			<isset property="execution.verbose"/> <!-- workbench option -->
		</condition>
				
		<!-- 
			Compute API / not API classpath
			brita platforms backward compatibility: ej.kf.FeatureEntryPoint is not taken account to consider a classpath as an API classpath (class was generated by wadapps workbench)  
		 -->
		<fail unless="arch.endianness"/> <!-- previously loaded by dynamicFeatureLink.xml -->
		<APIClasspathExtractor 
			verbose="${APIClasspathExtractor.verbose}"
			kernelFilename="${kernel.filename}" 
			endianness="${arch.endianness}" 
			classpath="${application.classpath}"
			readerFormat="elf"
			outputAPIClasspathProperty="application.api.classpath"
			outputNotAPIClasspathProperty="application.notapi.classpath"
			excludeTypes="ej.kf.FeatureEntryPoint"
		/>
	</target>
	
	<macrodef name="computeFeaturePatternset">
		<attribute name="packages.path" default="${feature.packages.path}"/>
		<attribute name="suffix" description="Patternset suffix"/>
		<attribute name="output.property" description="Output patternset includes property"/>
		<sequential>
			<pathconvert property="@{output.property}" pathsep=" ">
				<path path="@{packages.path}"/>
				<mapper>
					<chainedmapper>
						<!-- 1) Keep only relative path -->
						<globmapper from="${basedir}${file.separator}*" to="*"/>
						<!-- 2) Convert from package to relative path -->
						<filtermapper>
							<replacestring from="." to="/"/>
						</filtermapper>
						<!-- 3) Add suffix -->
						<regexpmapper from="([^\s]*)" to="\1/*@{suffix}"/>
					</chainedmapper>
				</mapper>
			</pathconvert>
		</sequential>
	</macrodef>
</project>