<?xml version="1.0" encoding="UTF-8"?>
<project name="extension.init.vd">
  <import as="nested" file="extension-init-old.xml" />
  <extension-point depends="init/vd, nested.init/execution" name="init/execution" />
  <target if="onS3" name="init/vd/embeded-applications">
    <taskdef resource="com/is2t/tools/application/repository/ant/antlib.xml">
      <classpath>
        <fileset dir="${jpf.dir}/tools" includes="application-repository-*.jar" />
      </classpath>
    </taskdef>
    <property name="dropins.applications.classpath.dir" value="${microej.io.tmpdir}/applications" />
    <property location="${platform.dir}/firmware/applications" name="firmware.applications.dir" />
    <condition else="${applications.dropins.dir}" property="vd.applications.dropins.dir" value="${output.dir}/META-INF/wpk">
      <equals arg1="${applications.dropins.dir}" arg2="" />
    </condition>
    <path id="vd.applications.classpath.id" />
    <path id="input.applications.wpk.id">
      <fileset dir="${vd.applications.dropins.dir}" erroronmissingdir="false" includes="**/*.wpk" />
      <fileset dir="${firmware.applications.dir}" erroronmissingdir="false" includes="**/*.wpk" />
    </path>
    <property description="A Comma separated list of applications ID to exclude." name="vd.excluded.applications" value="" />
    <ApplicationsClasspath classpathref="vd.applications.classpath.id" excludedapplications="${vd.excluded.applications}" inputpathref="input.applications.wpk.id" output="${dropins.applications.classpath.dir}" />
  </target>
  <target depends="init/vd/embeded-applications" if="onS3" name="init/vd">
    <property name="firmware.javalibs.resources" value="minimal.net-kernel-bundles.jar,com.microej.library.wadapps-standalone-standalone.jar,ej.library.eclasspath-logging-logging.jar,ej.library.eclasspath-properties-properties.jar,ej.library.eclasspath-bufferedstreams-bufferedstreams.jar,ej.library.eclasspath-io-io.jar,ej.library.eclasspath-printwriter-printwriter.jar,ej.library.wadapps-framework-framework.jar,ej.library.runtime-components-components.jar,ej.library.runtime-basictool-basictool.jar,ej.library.runtime-annotation-annotation.jar,ej.library.util-progress-progress.jar,ej.library.util-observable-observable.jar,ej.library.runtime-property-loader-property-loader.jar,ej.library.util-filemanager-filemanager.jar,com.microej.library.wadapps.kernel-common-api-common-api.jar,ej.library.util-filemanager-fs-filemanager-fs.jar" />
    <property location="${platform.dir}/firmware/javaLibs" name="firmware.javalibs.dir" />
    <pathconvert property="javalib.application.classpath">
      <fileset dir="${platform.dir}/javaLibs" includes="*.jar" />
      <fileset dir="${vm.dir}/javaLibs" excludes="" includes="*.jar" />
    </pathconvert>
    <pathconvert property="vd.applications.classpath" refid="vd.applications.classpath.id" />
    <tempfile destdir="${microej.io.tmpdir}" property="firmware.applications.list.dir" />
    <script language="javascript">var firmwareResources = &quot;&quot;+project.getProperty(&apos;firmware.javalibs.resources&apos;);
					var firmwareDir = &quot;&quot;+project.getProperty(&apos;firmware.javalibs.dir&apos;);
					var fileSeparator = &quot;&quot;+project.getProperty(&apos;file.separator&apos;);
					var pathSeparator = &quot;&quot;+project.getProperty(&apos;path.separator&apos;);
					var firmwarePath = &quot;&quot;;
					var applicationsPath = &quot;&quot;+project.getProperty(&apos;vd.applications.classpath&apos;);	
					firmwareResources.split(&apos;,&apos;).map(function(resource) {
						firmwarePath += project.resolveFile(firmwareDir + fileSeparator + resource) + pathSeparator;
					});
		
					var javalibsClasspath = &quot;&quot;+project.getProperty(&quot;javalib.application.classpath&quot;)
					var classpath = &quot;&quot;+project.getProperty(&apos;application.classpath&apos;) + pathSeparator + project.getProperty(&quot;firmware.applications.list.dir&quot;);
					/* Local App &gt; Resident Apps &gt; Kernel &gt; Platform Libs */
					var newClasspath =  classpath + pathSeparator + applicationsPath + pathSeparator + firmwarePath + pathSeparator + javalibsClasspath;
					project.setProperty(&apos;application.classpath&apos;, newClasspath);</script>
    <echo file="${firmware.applications.list.dir}/applications.list" message="KERNEL&#xa;" />
    <ApplicationsList append="true" classpath="${application.classpath}" output="${firmware.applications.list.dir}" />
  </target>
</project>
